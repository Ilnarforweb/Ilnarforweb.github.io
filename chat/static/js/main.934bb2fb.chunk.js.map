{"version":3,"sources":["components/Header.js","components/Login.js","components/Connect.js","components/MessagesList.js","components/SendMessages.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Login","state","nickname","isAutorised","buttonLabel","handleChange","bind","handleLogin","event","this","setState","target","value","preventDefault","localStorage","setItem","chatLogout","chatLogin","input","classList","add","remove","document","querySelector","className","type","placeholder","onChange","onClick","Connect","props","isConnected","handleConnect","socket","close","onclose","openSocket","setTimeout","onopen","e","openSocketState","MessagesList","messages","unionMessages","visibility","firstMessagesFlag","onmessage","incomingMessages","JSON","parse","data","uniqueId","some","item","id","newMessages","length","Math","sign","slice","newMessagesFlag","concat","cuttedMessages","reverse","chatNotification","Notification","requestPermission","options","body","from","message","hidden","notification","window","onblur","onfocus","time","unFormatedTime","Date","toLocaleTimeString","block","scrollTop","scrollHeight","scrollingBottom","windowVisibility","receiveMessages","map","key","messageDate","SendMessages","handleSend","send","stringify","App","undefined","WebSocket","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAWeA,G,uLANX,OACE,gCAAQ,sD,GAHOC,IAAMC,YCyEZC,G,kBAxEb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,SAAU,GACVC,aAAa,GAGf,EAAKC,YAAc,QACnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVP,E,0EAaDE,GACXC,KAAKC,SAAS,CAACR,SAAUM,EAAMG,OAAOC,U,kCAG5BJ,GACVA,EAAMK,iBACDJ,KAAKR,MAAME,aAIZW,aAAaC,QAAQ,WAAYN,KAAKR,MAAMC,UAC5CO,KAAKO,eAJPF,aAAaC,QAAQ,WAAYN,KAAKR,MAAMC,UAC5CO,KAAKQ,e,kCAQPR,KAAKC,SAAS,CACZR,SAAU,GACVC,aAAa,IAEfM,KAAKL,YAAc,SACnBK,KAAKS,MAAMC,UAAUC,IAAI,kB,mCAIzBX,KAAKC,SAAS,CACZP,aAAa,IAEfM,KAAKL,YAAc,QACnBK,KAAKS,MAAMC,UAAUE,OAAO,kB,0CAI5BZ,KAAKS,MAAQI,SAASC,cAAc,eAChCT,aAAaZ,SACfO,KAAKQ,YAELR,KAAKO,e,+BAKP,OACE,yBAAKQ,UAAU,SACb,yBAAKA,UAAU,YACb,gDADF,IAC+BV,aAAaZ,UAE5C,8BACE,2BAAOsB,UAAU,aAAaC,KAAK,OACjCC,YAAY,sBACZd,MAAOH,KAAKR,MAAMC,SAClByB,SAAUlB,KAAKJ,eACjB,4BAAQuB,QAASnB,KAAKF,aAAcE,KAAKL,mB,GAlE/BN,IAAMC,YC+CX8B,G,kBA7Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAED7B,MAAQ,CACX8B,aAAa,GAGf,EAAK3B,YAAc,OACnB,EAAK4B,cAAgB,EAAKA,cAAc1B,KAAnB,gBARJ,E,2EAWLE,GAAQ,IAAD,OACnBA,EAAMK,iBACDJ,KAAKR,MAAM8B,aAQdtB,KAAKqB,MAAMG,OAAOC,QAClBzB,KAAKqB,MAAMG,OAAOE,QAAU,kBAC1B,EAAKzB,SAAS,CAAEqB,aAAa,KAC7BtB,KAAKL,YAAc,SAVrBK,KAAKqB,MAAMM,aACXC,WAAW,WACT,EAAKP,MAAMG,OAAOK,OAAS,kBACzB,EAAK5B,SAAS,CAAEqB,aAAa,KAC7B,EAAK3B,YAAc,QACpB,M,wCASY,IAAD,OACZK,KAAKqB,MAAMG,QAAUxB,KAAKR,MAAM8B,cAAatB,KAAKqB,MAAMG,OAAOE,QAAU,SAACI,GAC5E,EAAKT,MAAMM,iB,+BAMb,OADA3B,KAAK+B,kBAEH,2BAAOhB,UAAU,WACf,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAAcI,QAASnB,KAAKuB,eAAgBvB,KAAKL,kB,GAxCrDN,IAAMC,YCqFb0C,G,kBAnFb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KACD7B,MAAQ,CACXyC,SAAU,IAEZ,EAAKC,cAAgB,GACrB,EAAKC,YAAa,EAClB,EAAKC,mBAAoB,EAPR,E,+EAUE,IAAD,OACZpC,KAAKqB,MAAMG,SAAQxB,KAAKqB,MAAMG,OAAOa,UAAY,SAACP,GACpD,EAAKQ,iBAAmBC,KAAKC,MAAMV,EAAEW,MACjC,EAAKL,oBACP,EAAKM,SAAW,EAAKJ,iBAAiBK,KAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAO,EAAKX,cAAc,GAAGW,KACrF,EAAKC,YAAc,EAAKR,iBAAiBS,OAAS,EAAKb,cAAca,OACjC,IAAhCC,KAAKC,KAAK,EAAKH,eACjB,EAAKR,iBAAmB,EAAKA,iBAAiBY,MAAM,EAAG,EAAKJ,aAC5D,EAAKK,iBAAkB,KAGvB,EAAKf,oBAAsB,EAAKM,UAAY,EAAKS,mBACnD,EAAKA,iBAAkB,EACvB,EAAKf,mBAAoB,EACzB,EAAKF,cAAgB,EAAKI,iBAAiBc,OAAO,EAAKlB,eACvD,EAAKmB,eAAiB,EAAKnB,cAAcgB,MAAM,EA5B9B,KA6BjB,EAAKG,eAAeC,UACpB,EAAKrD,SAAS,CAAEgC,SAAU,EAAKoB,iBAC/B,EAAKE,wB,yCAMTC,aAAaC,oBACbzD,KAAK0D,QAAU,CACbC,KAAM3D,KAAKR,MAAMyC,SAASjC,KAAKR,MAAMyC,SAASc,OAAO,GAAGa,KAAO,KACzD5D,KAAKR,MAAMyC,SAASjC,KAAKR,MAAMyC,SAASc,OAAO,GAAGc,UAEtDhD,SAASiD,QAAW9D,KAAKmC,aAAYnC,KAAK+D,aAC5C,IAAIP,aAAa,cAAexD,KAAK0D,Y,yCAGrB,IAAD,OACjBM,OAAOC,OAAS,kBAAM,EAAK9B,YAAa,GACxC6B,OAAOE,QAAU,kBAAM,EAAK/B,YAAa,K,kCAG/BgC,GAEV,OADAnE,KAAKoE,eAAiB,IAAIC,KAAKF,GACxBnE,KAAKoE,eAAeE,uB,wCAI3BtE,KAAKuE,MAAQ1D,SAASC,cAAc,UACpCd,KAAKuE,MAAMC,UAAYxE,KAAKuE,MAAME,e,2CAIlCzE,KAAK0E,oB,+BAGG,IAAD,OAGP,OAFA1E,KAAK2E,mBACL3E,KAAK4E,kBAEH,0BAAM7D,UAAU,SACd,wBAAIA,UAAU,gBACXf,KAAKR,MAAMyC,SAAS4C,IAAI,SAAAhB,GAAO,OAC9B,wBAAIiB,IAAKjB,EAAQhB,GAAI9B,UAAU,qBAC7B,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QAAQ8C,EAAQD,MAC/B,yBAAK7C,UAAU,QAAQ,EAAKgE,YAAYlB,EAAQM,QAElD,yBAAKpD,UAAU,WAAW8C,EAAQA,kB,GA3EvBxE,IAAMC,YCoClB0F,G,kBArCb,WAAY3D,GAAQ,IAAD,8BACjB,4CAAMA,KACD7B,MAAQ,CACXqE,QAAS,IAGX,EAAKjE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKoF,WAAa,EAAKA,WAAWpF,KAAhB,gBAPD,E,0EAUNE,GACXC,KAAKC,SAAS,CAAE4D,QAAS9D,EAAMG,OAAOC,U,iCAG7BJ,GACTA,EAAMK,iBACFJ,KAAKqB,MAAMG,QAAQxB,KAAKqB,MAAMG,OAAO0D,KAAK3C,KAAK4C,UAAU,CAC3DvB,KAAMvD,aAAaZ,SACnBoE,QAAS7D,KAAKR,MAAMqE,WAEtB7D,KAAKC,SAAS,CAAE4D,QAAS,O,+BAGzB,OACE,4BAAQ9C,UAAU,iBAChB,8BACE,2BAAOC,KAAK,OACVC,YAAY,qBACZd,MAAOH,KAAKR,MAAMqE,QAClB3C,SAAUlB,KAAKJ,eACjB,4BAAQuB,QAASnB,KAAKiF,YAAtB,c,GA/BiB5F,IAAMC,YC+BlB8F,G,kBA1Bb,WAAY/D,GAAQ,IAAD,8BACjB,4CAAMA,KAED7B,MAAQ,CACXgC,YAAQ6D,GAGV,EAAK1D,WAAa,EAAKA,WAAW9B,KAAhB,gBAPD,E,0EAWfG,KAAKC,SAAS,CAAEuB,OAAQ,IAAI8D,UAAU,qC,+BAIxC,OACE,yBAAKvE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcS,OAAQxB,KAAKR,MAAMgC,SACjC,kBAAC,EAAD,CAASA,OAAQxB,KAAKR,MAAMgC,OAAQG,WAAY3B,KAAK2B,aACrD,kBAAC,EAAD,CAAcH,OAAQxB,KAAKR,MAAMgC,c,GArBvBnC,IAAMC,YCKJiG,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/E,SAASgF,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.934bb2fb.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header><h1>Chat for everyone</h1></header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport '../css/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      nickname: '',\n      isAutorised: false,\n      }\n\n    this.buttonLabel = 'Login';\n    this.handleChange = this.handleChange.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({nickname: event.target.value});\n  }\n\n  handleLogin(event) {\n    event.preventDefault();\n    if (!this.state.isAutorised) {\n      localStorage.setItem('nickname', this.state.nickname);\n      this.chatLogin();\n    } else {\n        localStorage.setItem('nickname', this.state.nickname);\n        this.chatLogout();\n    }\n  }\n\n  chatLogin() {\n    this.setState({\n      nickname: '', \n      isAutorised: true\n      });\n    this.buttonLabel = 'Logout';\n    this.input.classList.add('input-hidden');\n  }\n\n  chatLogout() {\n    this.setState({\n      isAutorised: false\n      });\n    this.buttonLabel = 'Login';\n    this.input.classList.remove('input-hidden');\n  }\n\n  componentDidMount() {\n    this.input = document.querySelector('.nick-input');\n    if (localStorage.nickname) {\n      this.chatLogin();\n    } else {\n      this.chatLogout();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"login\">\n        <div className=\"nickname\">\n          <span>Your nickname:</span> {localStorage.nickname}\n        </div>\n        <form >\n          <input className=\"nick-input\" type=\"text\" \n            placeholder=\"Enter your nickname\"\n            value={this.state.nickname} \n            onChange={this.handleChange} />\n          <button onClick={this.handleLogin}>{this.buttonLabel}</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport Login from './Login';\nimport '../css/Connect.css'\n\nclass Connect extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      isConnected: false,\n    };\n\n    this.buttonLabel = 'Chat';\n    this.handleConnect = this.handleConnect.bind(this);\n  }\n  \n  handleConnect(event) {\n    event.preventDefault();\n    if (!this.state.isConnected) {\n      this.props.openSocket();\n      setTimeout(() => {\n        this.props.socket.onopen = () => \n          this.setState({ isConnected: true }); \n          this.buttonLabel = 'Exit';  \n      }, 0);\n    } else {\n      this.props.socket.close();\n      this.props.socket.onclose = () => \n        this.setState({ isConnected: false });     \n        this.buttonLabel = 'Chat';\n    } \n  }\n  \n  openSocketState() {\n    if (this.props.socket && this.state.isConnected) this.props.socket.onclose = (e) => {\n      this.props.openSocket();\n    }\n  }\n\n  render() {\n    this.openSocketState();\n    return (\n      <aside className=\"connect\">\n        <Login />\n        <button className=\"chat-button\" onClick={this.handleConnect}>{this.buttonLabel}</button>\n      </aside>\n    );\n  }\n}\n\nexport default Connect;\n","import React from 'react';\nimport '../css/MessageList.css';\n\nconst MAX_MESSAGE_LENGTH = 100;\n\nclass MessagesList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      messages: [],\n      };\n    this.unionMessages = [];\n    this.visibility = true;\n    this.firstMessagesFlag = true;\n  }\n\n    receiveMessages() {\n      if (this.props.socket) this.props.socket.onmessage = (e) => { \n        this.incomingMessages = JSON.parse(e.data);\n        if(!this.firstMessagesFlag) {\n          this.uniqueId = this.incomingMessages.some(item => item.id === this.unionMessages[0].id);\n          this.newMessages = this.incomingMessages.length - this.unionMessages.length;\n          if (Math.sign(this.newMessages) === 1) {\n            this.incomingMessages = this.incomingMessages.slice(0, this.newMessages);\n            this.newMessagesFlag = true;\n          }\n        }\n        if (this.firstMessagesFlag || !this.uniqueId || this.newMessagesFlag) {\n          this.newMessagesFlag = false;\n          this.firstMessagesFlag = false;\n          this.unionMessages = this.incomingMessages.concat(this.unionMessages);\n          this.cuttedMessages = this.unionMessages.slice(0, MAX_MESSAGE_LENGTH);\n          this.cuttedMessages.reverse();\n          this.setState({ messages: this.cuttedMessages });\n          this.chatNotification();\n        }\n      }\n    }\n    \n    chatNotification() {\n      Notification.requestPermission();\n      this.options = {\n        body: this.state.messages[this.state.messages.length-1].from + ': ' + \n              this.state.messages[this.state.messages.length-1].message,\n        };\n      if (document.hidden || !this.visibility) this.notification = \n        new Notification('New message', this.options);\n    }\n    \n    windowVisibility() {\n      window.onblur = () => this.visibility = false;\n      window.onfocus = () => this.visibility = true;\n    }\n\n    messageDate(time) {\n      this.unFormatedTime = new Date(time);\n      return this.unFormatedTime.toLocaleTimeString();\n    }\n\n    scrollingBottom() {\n      this.block = document.querySelector('.mlist');\n      this.block.scrollTop = this.block.scrollHeight;\n    }\n    \n    componentDidUpdate() {\n      this.scrollingBottom();\n    }\n    \n    render() {\n      this.windowVisibility();\n      this.receiveMessages();\n      return (\n        <main className=\"mlist\">\n          <ul className=\"message-list\">\n            {this.state.messages.map(message => \n              <li key={message.id} className=\"message-list-item\">\n                <div className=\"list-item-top\">\n                  <div className=\"from\">{message.from}</div> \n                  <div className=\"time\">{this.messageDate(message.time)}</div> \n                </div>\n                <div className=\"message\">{message.message}</div>\n              </li>\n            )}\n          </ul>\n        </main>\n      );\n    }\n}\n\nexport default MessagesList;\n","import React from 'react';\nimport '../css/SendMessages.css';\n\nclass SendMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ message: event.target.value })\n  }\n  \n  handleSend(event) {\n    event.preventDefault();\n    if (this.props.socket) this.props.socket.send(JSON.stringify({\n      from: localStorage.nickname, \n      message: this.state.message\n      }));\n    this.setState({ message: '' });\n  }\n  render() {\n    return (\n      <footer className=\"send-messages\">\n        <form>\n          <input type=\"text\" \n            placeholder=\"Enter your message\" \n            value={this.state.message} \n            onChange={this.handleChange} />\n          <button onClick={this.handleSend}>Send</button>\n        </form>\n      </footer>\n    );\n  }\n}\n\nexport default SendMessages;\n","import React from 'react';\nimport Header from './Header';\nimport Connect from './Connect';\nimport MessagesList from './MessagesList';\nimport SendMessages from './SendMessages';\nimport '../css/App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: undefined,\n      };\n\n    this.openSocket = this.openSocket.bind(this);\n    }\n    \n    openSocket() {\n      this.setState({ socket: new WebSocket('wss://wssproxy.herokuapp.com/') });\n    }\n    \n    render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <MessagesList socket={this.state.socket} />\n        <Connect socket={this.state.socket} openSocket={this.openSocket} />\n        <SendMessages socket={this.state.socket} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}